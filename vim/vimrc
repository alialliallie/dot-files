set shell=/bin/bash
set nocompatible

" vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Basic VIM
Plug 'bling/vim-airline'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
Plug 'mileszs/ack.vim'

" Colors
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'gummesson/stereokai.vim'
Plug 'sonjapeterson/1989.vim'
Plug 'andreasvc/vim-256noir'

" git
Plug 'airblade/vim-gitgutter'
Plug 'rhysd/committia.vim'

" Programming things
Plug 'tomtom/tcomment_vim'
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'scrooloose/syntastic'

" Ruby
Plug 'tpope/vim-endwise'

" Crystal
Plug 'rhysd/vim-crystal'

" Clojure/LISP
Plug 'guns/vim-clojure-static'
Plug 'kien/rainbow_parentheses.vim'
Plug 'tpope/vim-fireplace'
Plug 'vim-scripts/paredit.vim'

" Frontend
Plug 'pangloss/vim-javascript'
Plug 'marijnh/tern_for_vim'
Plug 'mxw/vim-jsx'
Plug 'mustache/vim-mustache-handlebars'

" Erlang
Plug 'vim-erlang/vim-erlang-runtime'
Plug 'vim-erlang/vim-erlang-compiler'
Plug 'vim-erlang/vim-erlang-omnicomplete'
Plug 'vim-erlang/vim-erlang-tags'
Plug 'edkolev/erlang-motions.vim'

" Elixir
Plug 'elixir-lang/vim-elixir'

"OCaml
Plug 'def-lkb/ocp-indent-vim'

" Scala
Plug 'derekwyatt/vim-scala'

" Misc
Plug 'dag/vim-fish'

call plug#end()

let g:deoplete#enable_at_startup = 1

set showcmd
let mapleader=","
let maplocalleader=",,"

" Editor layout {{{
set termencoding=utf-8
set encoding=utf-8
set lazyredraw
set laststatus=2        " Always add status line even if one window.
set showtabline=2       " Always show tab bar
set cmdheight=2         " 2 row status
set number              " line numbers

set ruler
"}}}

" Whitespace
set nowrap                      " Don't wrap
set tabstop=4 shiftwidth=4      " four space tabs
set expandtab                   " spaces not tabs
set backspace=indent,eol,start  " Allow backspace over anything in ins
set colorcolumn=79

" Searching
set hlsearch                    " hightlight matches
set incsearch                   " incremental search
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless you start using case

set listchars=tab:»·,trail:·,extends:#,nbsp:·
set pastetoggle=<F2>
nnoremap <F8> :setl noai nocin nosi inde=<CR>
" }}}

" Vim behavior
set history=1000
set undolevels=1000
set nobackup
set noswapfile

set noerrorbells		" Silence, you!

set wildignore+=*.o,*.obj,.git,.svn,pkg,*node_modules*,*venv/*
set wildignore+=*vendor/bundle/*,*vendor/cache/*,*vendor/gems/*,*vendor/jetty*
set wildignore+=*target/*

"" Highlighting, colors, and look
set guifont=Sauce_Code_Powerline:h13

syntax enable

if (has("gui_running"))
    set background=light
else
    set background=dark
    let g:solarized_contrast="high"
endif
"" Hackityhack
set t_Co=256
let g:solarized_termcolors=256
colorscheme molokai

"" Current line, only in insert mode
autocmd InsertLeave * set nocursorline
autocmd InsertEnter * set cursorline

"" File type settings
au BufNewFile,BufRead *.cshtml set filetype=html
au BufNewFile,BufRead Gemfile set filetype=ruby
au BufNewFile,BufRead *.md set filetype=markdown
autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd Filetype markdown setlocal spell textwidth=72
au VimEnter * RainbowParenthesesActivate
autocmd FileType javascript RainbowParenthesesLoadBraces
autocmd FileType jsx RainbowParenthesesLoadBraces
autocmd FileType clojure RainbowParenthesesLoadRound

"" Key Mappings
nmap <silent> <leader>/ :silent :nohlsearch<CR>

nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nmap <silent> <leader>sc :SyntasticCheck<CR>
nmap <silent> <leader>ts :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
nnoremap <silent> <Left> :GitGutterPrevHunk<CR>
nnoremap <silent> <Right> :GitGutterNextHunk<CR>
inoremap <silent> <Left> :GitGutterPrevHunk<CR>
inoremap <silent> <Right> :GitGutterNextHunk<CR>
nnoremap <C-N> :CtrlPBuffer<CR>
inoremap <silent> jj <ESC>

au Filetype clojure nmap <c-c><c-k> :Require<cr>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"" Quick swap between normal and relative line numbers
function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
    else
        set relativenumber
    endif
endfunc

nnoremap <C-L> :call NumberToggle()<cr>

"" Clear highlight on sign gutter, for gitgutter
highlight clear SignColumn

"" Marked support on OSX
" if has("gui_macvim")
    :nnoremap <leader>m :silent !open -a 'Marked 2.app' '%:p'<cr>
" endif

"" Syntastic suggested config
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_ocaml_checkers = ['merlin']
let g:syntastic_javascript_checkers = ['standard']
let g:syntastic_scss_checkers = ['scss_lint']
let g:syntastic_ruby_checkers = ['rubocop', 'mri']
let g:syntastic_ruby_rubocop_exec = '/Users/allisonkeene/.rbenv/shims/rubocop'

"" Airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

let g:ackprg = 'ag --vimgrep --smart-case'
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack

" OCaml

let g:opamshare = substitute(system('opam config var share'), '\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"

"" Bring in local settings that shouldn't be in public repo
if filereadable($HOME . "/vimfiles/vimrc.local")
    source $HOME/vimfiles/vimrc.local
endif
if filereadable($HOME . "/.vim/vimrc.local")
    source $HOME/.vim/vimrc.local
endif

